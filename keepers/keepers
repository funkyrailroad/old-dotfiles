# print to print a9-k008-col
# double side printed along long side
# saturation 0 is black and white (apparently not)
# a good explanation of duplexing, also how to make booklets (use pdftops)
# http://www.enet.umn.edu/docs/unix/printing/duplex_cups.html
# Duplex=DuplexNoTumble is long side binding
# Duplex=DuplexTumble is short side binding
lpr -P a9-k008-col -o Duplex=DuplexNoTumble -o saturation=0 -o page-ranges=1-2  out.pdf 
lpr -P a9-k008-col -o sides=two-side-long-edge -o saturation=0 -o page-ranges=1-2  out.pdf 

##################
# PDFJAM
##################

# convert file.pdf to a4 and the output file is out.pdf
# a whole lot of things, see http://www2.warwick.ac.uk/fac/sci/statistics/staff/academic-research/firth/software/pdfjam
# printing a booklet
# print to a .ps file in adobe reader
# print it with document viewer double sided and flip over short edge
pdfjam --outfile out.pdf --paper a4paper --scale 1.5 --offset '-3cm 0cm' file.pdf

# merging
# http://0x2a.at/blog/2011/02/pdf_manipulation_on_the_cli/
pdfjam file1.pdf '-' file2.pdf '1,2' file3.pdf '2-' --outfile output.pdf

# splitting
pdfjam file1.pdf '1,2' --outfile first.pdf
pdfjam file1.pdf '3-' --outfile second.pdf
# http://0x2a.at/blog/2011/02/pdf_manipulation_on_the_cli/

# trimming
pdfjam --trim '1cm 2cm 1cm 2cm' --clip true file1.pdf --outfile output.pdf
# http://0x2a.at/blog/2011/02/pdf_manipulation_on_the_cli/

# upping
pdfjam --nup 2x2 file1.pdf --outfile output.pdf
# http://0x2a.at/blog/2011/02/pdf_manipulation_on_the_cli/


# making a booklet, have to print double-sided and flip along short edge
pdfbook --short-edge file.pdf

#####################################


# change keyboardlayout to us
setxkbmap us

# in vim, format in the current paragraph
# automatic word wrapping http://vim.wikia.com/wiki/Automatic_word_wrapping
gqip

# take a screen shot with a selection tool and save as file.png
scrot -s file.png

# add this into the vim-latex tex.vim file to ensure latex recompiles and
# bibliogoraphy entries work
TexLet g:Tex_MultipleCompileFormats = 'dvi, pdf, bib'

# I used this to make a file read only, don't understand it though
chmod 0444 filename

# config file in ~/.config/redshift.conf
redshift

# extract the files contained in zip.zip into folder/
unzip -d folder/ zip.zip

# a case-insensitive search for "phrase" in all files recursively that ignores
# matches in binary files and prints the line number in the file of the matches
grep -iIrn phrase *

# edit cron jobs
crontab -e

# delete newest two entries in a directory
ls -t | head -n 2 | xargs rm --

#push local branch to remote location, add -f to force push
git push mpg antialignment-gpu-2d:sandbox/jake.atwell/antialignment-gpu-2d

# delete remote branch, add -f to force push, -n to try
git push mpg :sandbox/jake.atwell/antialignment-gpu-2d

#push current branch to sandbox repo
currentBranch=`git rev-parse --abbrev-ref HEAD`; git push mpg ${currentBranch}:sandbox/jake.atwell/$currentBranch

#BACKUPS
#backup to storage
rsync -av --exclude .cache --exclude .mozilla ~/ /storage/mi/jatwell/backup

#backup to physics server
rsync -av --exclude .cache --exclude .mozilla ~/ login.physik.fu-berlin.de:/net/storage/jatwell/backup


# recompile, run generate_configuration, run 2d-python script for plotting
# positions and orientations, make gif from png files, open gif with eog
./full-antialignment && ~/master_thesis/analysis/2d-simulation-animation/2d-simulation.py antialignment/configuration.h5 && convert movie-test/*.png movie-test/animation.gif && eog movie-test/animation.gif

# generally building and installing locally from source
# download the source code
./configure --prefix=/path/to/installation/dir
make
make install

# manually configure libraries that are needed by an executable
# https://nixos.org/patchelf.html
patchelf --set-rpath /opt/my-libs/lib:/foo/lib program

#ctags initialize and hide file in .git folder
# https://andrew.stwrt.ca/posts/vim-ctags/
ctags -R -f ./.git/tags .

# using sed to change a line in multiple files
sed -i 's/max_steps = 5/max_steps = nsteps/' current_modes.py density_modes.py velocity-field.py vorticity_fields.py 

# running a remote script on a remote machine via ssh, can't be run in
ssh bountiful 'cd ~/opt/halmd/halmd/ && bash ./test_run.sh'

# see the list of background jobs and bring/send specific ones to fore-/back-ground
jobs/fg/bg

# bash string replacement, replace first match of $substring with $replacement.
${string/substring/replacement}

# bash string replacement, replace all matches of $substring with $replacement.
${string//substring/replacement}

# running this program in parallel for all the files that end in .h5, with
# 2 jobs per core
parallel -j200% energy_spectrum.py ::: *.h5

# GENERATE NEW SSH KEY AND ADD TO SSH-AGENT
# Paste the text below, substituting in your GitHub Enterprise email address.
ssh-keygen -t rsa -b 4096 -C "jake.atwell@gmail.com"
# When you're prompted to "Enter a file in which to save the key," press
# Enter. This accepts the default file location.
# add ssh key to the ssh-agent
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_rsa

# running ocf while grepping relevant  files
ls *.h5 | grep density_150 | xargs ocf.py

# figure out the names of the keys you press, useful for assigning keyboard
# shorcuts in i3
xev

# split file into multiple other files with 10 lines each (names begin with
# prefix)
split -l 10 file prefix

# convert pdf to grayscale
convert -colorspace GRAY color.pdf gray.pdf

# vim cheatsheet
https://michaelgoerz.net/refcards/vimqrc.pdf

# install pathogen
mkdir -p ~/.vim/autoload ~/.vim/bundle && \
curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim

# use pathogen in vim (add this to ~/.vimrc file)
execute pathogen#infect()
syntax on
filetype plugin indent on

# install plugin with pathogen
cd ~/.vim/bundle && \
git clone <github-address>.git


# go to directory you just came from
cd -

# repeats last command (ex. sudo !!)
!!

# runs last command subbing string2 in for string1
^string1^string2

# renames files
rename 's/string1/string2/' \*.txt

# delete word/argument to left of cursor
ctrl + w

# suspend process; continue it in the background
ctrl + z; bg

# quit line, new blank entry
ctrl + c

# backgrounding and foregrounding different jobs

# inserts last arguments from you last bash command
<esc>.

# The -p will get you all the required elements to view the site correctly
# (css, images, etc). The -k will change all links (to include those for CSS &
# images) to allow you to view the page offline as it appeared online.
wget -p -k i3wm.org/docs/userguide.html

# recursively get all pages up to 5 levels deep, with local links so you can navigate the pages
wget -r -k www.website.com

# mirror the whole website
wget -m www.website.com

# read file of websites/links to download (for batch)
wget -i /path/to/inputfile

# retry 10 times and will try to connect for 9 seconds for each link in file
wget -t 10 -T 9  -i /path/to/file

# continue download
wget -c www.website.com

# wait 60s between each retrieval (useful/considerate if downloading a lot from one source)
wget -w 60 -i /path/to/file

# waits a randomamt of time so you're not recognized as downloading from a script
wget --random-wait -i /path/to/inputfile

# login to a site (don't do on a multiuser computer, running ps will show your username and password)
wget --user=yourusername --password=yourpassword <URL>

# only download filetype .mp3 from a website
wget -A "*.mp3 -r <URL>

# get current week number
python -c 'import datetime; print(str(datetime.date.today().isocalendar()[1]).zfill(2))'

# copy all webpages with random wait time ranging between 0.5 * 2 and 1.5 * 2
# seconds, mirror option () and convert links (change file paths for local
# viewing)
wget -w 2 --random-wait -mk http://www.rotary7430yep.org/

# choose the output directory and don't redownload files that are already
# downloaded (no clobber option)
wget -nc -P output-dir

# download mp3 from a youtube video
youtube-dl -x --audio-format mp3 <youtube-url>

# show aspect ratios
identify -format "%[fx:abs((w/h))]:%M\n" *

# show all image sizes (width x height)
identify -format "%[fx:abs((w))]x%[fx:abs(h)]: %M\n" *

# given an image ratio, output two options for resizing the image. one without
# changing the height, the other without changing the width
ar=0.8
thisone(){
identify -format "%[fx:abs((w))]x%[fx:abs(h)]: %M\n" *
identify -format "%[fx:abs((w))]x%[fx:abs(h)]: %M\n" *
}

# imagemagick convert resize image
convert file.jpg -resize 180x225 resize-file.jpg

# convert flac files to 16 bit wav files
for i in *.flac;
do 
sox $i  -b16 ${i%flac}wav
done

# remove all group (g) and other (o) permissions (user permissions indicated with u)
chmod go-rwx <file>

# recursively make a directory and all its subdirectories have open
# permissions
chmod -R 777 <dir>

# select all files names with xvg
find . -name md*.xvg

# convert private ssh keys: ppk to pem
puttygen priv.ppk -O private-openssh -o priv.pem

# convert public ssh keys: ppk to pem, caln also do private keys
puttygen pub -O public-openssh -o pub.pem

# convert between gro to pdb file
gmx editconf -f foo.gro -o foo.pdb

# check existence of bash arguments
if [ $# -eq 0 ]
  then
    echo "No arguments supplied"
fi

# quality ssh key generation
# https://security.stackexchange.com/a/144044
# https://stribika.github.io/2015/01/04/secure-secure-shell.html
ssh-keygen -t ed25519 -a 100

# connect to bluetooth device
bluetoothctl
pair <device>
connect <device>

# if bluetooth isn't connecting, restart pulseaudio and reconnect
pulseaudio -k
pulseaudio --start
bluetoothctl
connect <device>

# conda create an environment
conda create -n <env-name> python=3.6

# conda activate an environment
conda activate <env-name>

# deactivate/exit/stop conda
conda deactivate

# list conda environments
conda env list

# see all installed packages in an environment
conda list -n <env-name>

# conda remove an environment
conda env remove --name <env-name>

# conda output spec-file of all packages installed (does not include packages
# installed via pip
conda list --explicit > spec-file.txt

# conda create environment from a spec-file
conda create --name <name> --file spec-file.txt

# conda update conda itself
conda update conda
conda update anaconda

# get python script to use conda environment python
#! /usr/bin/env python

# pip install specific version
pip install <package>==<version>

# pip save libraries of current environment to a file
pip freeze > requirements.txt

# pip install libraries from a file
pip install -r requirements.txt

# pip upgrade a package
pip install --upgrade <package>

# pip show package information (ie version number)
pip show <package>

# pip uninstall a package
pip uninstall <package>

# pip install local package in editable mode
pip install -e path/to/package

# kill all processes associated with port 8000
sudo fuser -k 8000/tcp

# uninstall packages (personal settings too)
sudo apt-get remove --purge <package>

# auto remove unused packages
sudo apt-get autoremove

# check which version of a package you have
dpkg -s <package> | grep Version

# save an i3 workspace on <workspace> to ~/.i3/<filename>.json
i3-save-tree --workspace <workspace> > ~/.i3/<filename>.json

# load <workspace> with settings from ~/.i3/<filename>.json
i3-msg "workspace <workspace>; append_layout ~/.i3/<filename>.json"

# search snap repository for software
snap find <search>

# list snap packages installed on my system
snap list

# remove a snap package
sudo snap remove <package>

# add nvidia repository
sudo add-apt-repository ppa:graphics-drivers/ppa

# remove all nvidia drivers
sudo apt --purge autoremove nvidia*

# install new nvidia driver
sudo apt update && sudo apt upgrade
sudo apt install nvidia-driver-VERSION_NUMBER_HERE

# i3 move a whole workspace to the next output to the right/left
i3-msg move workspace to output right/left

# save all environment packages from $OLD_ENV and load them in $NEW_ENV
OLD_ENV="yolov3-tf2"
NEW_ENV="yolov3-tf2-test"
conda activate $OLD_ENV
conda list --explicit > ${OLD_ENV}-spec-file.txt
pip freeze > ${OLD_ENV}-requirements.txt
conda create --name $NEW_ENV --file ${OLD_ENV}-spec-file.txt
conda activate $NEW_ENV
pip install -r ${OLD_ENV}-requirements.txt
rm ${OLD_ENV}-spec-file.txt ${OLD_ENV}-requirements.txt

# scan for a bluetooth
bluetoothctl
scan on

# bluetooth Error: Waiting to connect to bluetoothd...
# https://unix.stackexchange.com/questions/402623/waiting-to-connect-to-bluetoothd/413272
modprobe btusb
systemctl start bluetooth

# postgresql show tables
\dt

# postgresql show tables and sequences
\dt

# postgresql show a table
select * from <table>;

# postgresql WHERE clause
http://www.postgresqltutorial.com/postgresql-show-tables/

# postgresql copy data from csv to a table
\copy <table> from 'file.csv' delimiter ',' CSV

# postgresql update sequence counter after importing from csv
select setval('<table>_id_seq', ( select max(id) from <table>));

# postgresql delete from table
DELETE FROM <table> WHERE <condition>

# bash loop over an array
array=( one two three )
for i in ${array[@]}
do
    echo $i
done

# sqlite3 export table to csv
sqlite3 -header -csv db.sqlite3 "select * from <table>"

# sqlite3 show all tables
.tables

# sqlite3 show a table
SELECT * FROM <table>;

# sqlite3 show how a table was made
.schema <table>

# show wifi networks
nmcli dev wifi

# connect to wifi (doesn't work in i3 for some reason)
nmcli device wifi connect <APname> <password>

# connect to wifi and bluetooth (application in terminal)
nmtui-connect

# edit wifi and bluetooth connections (application in terminal)
nmtui-connect

# edit hostname of computer
nmtui-hostname

# see if a port on a remote IP is open or not
nc -zv <ip-address> <port>

# docker show all mapped ports
# https://docs.docker.com/engine/reference/commandline/port/
docker port <container>

# stop docker
docker stop <container>

# see what's happening on <port>
lsof -i tcp:<port>

# i3 rename windows
# https://faq.i3wm.org/question/1657/add-friendly-name-to-workspace-but-keep-numbers-for-shortcuts.1.html
bindsym $mod+1 workspace number 1 <name>

# enable access to a port
sudo firewall-cmd --zone=public --add-port=5433/tcp --permanent
sudo firewall-cmd --reload

# listen on a port
nc -l <port>

# snapshot of current docker processes (also shows port information)
docker ps

# get details of a specific docker container
docker inspect <container>

# get all network IP addresses of the host
hostname -I

# get public IP address
curl -4 ifconfig.co

# labelImg startup command
python labelImg.py [IMAGE_PATH] [PRE-DEFINED CLASS FILE] [TAG_PATH]

# bash stdout/stderr redirection
# https://askubuntu.com/questions/625224/how-to-redirect-stderr-to-a-file

# write stdout and stderr to separate files
command > out 2>error

# redirect stderr to stdout, then redirect stdout to file
command >out 2>&1

# redirect both to a file (not supported by all shells)
command &> out

# python speeding up code with multithreading, parallelize
https://pythontips.com/2019/05/29/speeding-up-python-code-using-multithreading/#more-1682

# docker get information about the image (e.g. version)
docker image inspect IMAGE

# run a specific a django test
# https://stackoverflow.com/a/21985517
# https://docs.djangoproject.com/en/2.2/topics/testing/overview/#running-tests
python manage.py test app.file.class.function


# mount remote filesystem
sudo sshfs -o allow_other user@x.x.x.x:/path/to/folder /mount/dir

# really annoying fstab entries for mounting a network filesystem 
stic@192.168.2.2:/ /mnt/160_data_2_2 fuse.sshfs delay_connect,_netdev,user,idmap=user,transform_symlinks,identityfile=/home/stic/.ssh/id_rsa,allow_other,default_permissions,uid=0,gid=0 0 0


# really annoying fstab entries for mounting an arbitrary IP
sshfs#stic@50.198.153.83:/velocity/old-newspapers/frank /home/stic/Desktop/loc\040tagger fuse delay_connect,port=2244,IdentityFile=/home/stic/.ssh/id_rsa,idmap=user,allow_other,uid=0,gid=0,rw,nosuid,nodev 0 0

# xargs specify where the input arguments go in the command
ls | xargs -I % echo mv % zed

# sum a column of a pandas dataframe
df['col'].sum()

# testing a view with login required and getting json input from a file
http -a jtl:1234 POST http://127.0.0.1:8000/conceptsearch/savequery/ < query_sample_input.json

# postgres deleting all rows in a table and resetting the sequence
delete from <table>;
alter sequence <sequence> minvalue 0 start with 1;
select setval (<sequence>, 0);

# git delete a remote branch
git push --delete <remote> <branch>

# see how much space is used/available on all devices
df -h

# make new user, establish home directory, make it, and assign password
# https://www.cyberciti.biz/faq/create-a-user-account-on-ubuntu-linux/
sudo useradd -s /bin/bash -d /home/vivek/ -m -G sudo vivek
sudo passwd vivek

# check which desktop environments are available on your system
ls /usr/share/xsessions

# consistently call a command and watch the results update
watch -n 0.5 nvidia-smi

# rename a file with a pattern that starts with a hyphen
rename.ul -- '-pc-gt' '' *xml
