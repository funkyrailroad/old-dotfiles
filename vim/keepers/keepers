lpr -P a9-k008-col -o Duplex=DuplexNoTumble -o saturation=0 -o page-ranges=1-2  out.pdf 
lpr -P a9-k008-col -o sides=two-side-long-edge -o saturation=0 -o page-ranges=1-2  out.pdf 
# print to print a9-k008-col
# double side printed along long side
# saturation 0 is black and white (apparently not)
# a good explanation of duplexing, also how to make booklets (use pdftops)
# http://www.enet.umn.edu/docs/unix/printing/duplex_cups.html
# Duplex=DuplexNoTumble is long side binding
# Duplex=DuplexTumble is short side binding

##################
# PDFJAM
##################

pdfjam --outfile out.pdf --paper a4paper --scale 1.5 --offset '-3cm 0cm' file.pdf 
# convert file.pdf to a4 and the output file is out.pdf
# a whole lot of things, see http://www2.warwick.ac.uk/fac/sci/statistics/staff/academic-research/firth/software/pdfjam
# printing a booklet
# print to a .ps file in adobe reader
# print it with document viewer double sided and flip over short edge

# merging
pdfjam file1.pdf '-' file2.pdf '1,2' file3.pdf '2-' --outfile output.pdf
# http://0x2a.at/blog/2011/02/pdf_manipulation_on_the_cli/

# splitting
pdfjam file1.pdf '1,2' --outfile first.pdf
pdfjam file1.pdf '3-' --outfile second.pdf
# http://0x2a.at/blog/2011/02/pdf_manipulation_on_the_cli/

# trimming
pdfjam --trim '1cm 2cm 1cm 2cm' --clip true file1.pdf --outfile output.pdf
# http://0x2a.at/blog/2011/02/pdf_manipulation_on_the_cli/

# upping
pdfjam --nup 2x2 file1.pdf --outfile output.pdf
# http://0x2a.at/blog/2011/02/pdf_manipulation_on_the_cli/


# making a booklet, have to print double-sided and flip along short edge
pdfbook --short-edge file.pdf

#####################################

scp -r jatwell@login.physik.fu-berlin.de:~/.vim .

scp jatwell@login.physik.fu-berlin.de:~/.bashrc .

h5dump  lennard_jones_20170427_155401.h5/h5md/author

h5ls lennard_jones_20170427_155401.h5/h5md

setxkbmap us
# change keyboardlayout to us



gqip
# in vim, format in the current paragraph
# automatic word wrapping http://vim.wikia.com/wiki/Automatic_word_wrapping

scrot -s file.png
# take a screen shot with a selection tool and save as file.png

TexLet g:Tex_MultipleCompileFormats = 'dvi, pdf, bib'
# add this into the vim-latex tex.vim file to ensure latex recompiles and
# bibliogoraphy entries work

chmod 0444 filename
# I used this to make a file read only, don't understand it though

redshift
# config file in ~/.config/redshift.conf

unzip -d folder/ zip.zip
# extract the files contained in zip.zip into folder/

grep -iIrn phrase *
# a case-insensitive search for "phrase" in all files recursively that ignores
matches in binary files and prints the line number in the file of the matches

crontab -e
# edit cron jobs

ls -t | head -n 2 | xargs rm --
# delete newest two entries in a directory

git push mpg antialignment-gpu-2d:sandbox/jake.atwell/antialignment-gpu-2d
#push local branch to remote location, add -f to force push

git push mpg :sandbox/jake.atwell/antialignment-gpu-2d
# delete remote branch, add -f to force push, -n to try

currentBranch=`git rev-parse --abbrev-ref HEAD`; git push mpg ${currentBranch}:sandbox/jake.atwell/$currentBranch
#push current branch to sandbox repo

#BACKUPS
#backup to storage
rsync -av --exclude .cache --exclude .mozilla ~/ /storage/mi/jatwell/backup
#backup to physics server
rsync -av --exclude .cache --exclude .mozilla ~/ login.physik.fu-berlin.de:/net/storage/jatwell/backup


# recompile, run generate_configuration, run 2d-python script for plotting
# positions and orientations, make gif from png files, open gif with eog
./full-antialignment && ~/master_thesis/analysis/2d-simulation-animation/2d-simulation.py antialignment/configuration.h5 && convert movie-test/*.png movie-test/animation.gif && eog movie-test/animation.gif

# generally building and installing locally from source
# download the source code
# ./configure --prefix=/path/to/installation/dir
# make
# make install


# manually configure libraries that are needed by an executable
# https://nixos.org/patchelf.html
patchelf --set-rpath /opt/my-libs/lib:/foo/lib program

ctags -R -f ./.git/tags .
#ctags initialize and hide file in .git folder
# https://andrew.stwrt.ca/posts/vim-ctags/




sed -i 's/max_steps = 5/max_steps = nsteps/' current_modes.py density_modes.py velocity-field.py vorticity_fields.py 
#using sed to change a line in multiple files

ssh bountiful 'cd ~/opt/halmd/halmd/ && bash ./test_run.sh'
# running a remote script on a remote machine via ssh, can't be run in

jobs/fg/bg
# see the list of background jobs and bring/send specific ones to fore-/back-ground

${string/substring/replacement}
#bash string replacement, replace first match of $substring with $replacement.

${string//substring/replacement}
#bash string replacement, replace all matches of $substring with $replacement.

parallel -j200% energy_spectrum.py ::: *.h5
#running this program in parallel for all the files that end in .h5, with
#2 jobs per core

# GENERATE NEW SSH KEY AND ADD TO SSH-AGENT
# Paste the text below, substituting in your GitHub Enterprise email address.
ssh-keygen -t rsa -b 4096 -C "jake.atwell@gmail.com"
# When you're prompted to "Enter a file in which to save the key," press Enter. This accepts the default file location.
# add ssh key to the ssh-agent
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_rsa

# running ocf while grepping relevant  files
ls *.h5 | grep density_150 | xargs ocf.py

# figure out the names of the keys you press, useful for assigning keyboard
# shorcuts in i3
xev


# split file into multiple other files with 10 lines each (names begin with
# prefix)
split -l 10 file prefix

#convert pdf to grayscale
convert -colorspace GRAY color.pdf gray.pdf

# vim cheatsheet
https://michaelgoerz.net/refcards/vimqrc.pdf

# install pathogen
mkdir -p ~/.vim/autoload ~/.vim/bundle && \
curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim

# use pathogen in vim (add this to ~/.vimrc file)
execute pathogen#infect()
syntax on
filetype plugin indent on

#
# install plugin with pathogen
cd ~/.vim/bundle && \
git clone <github-address>.git


#go to directory you just came from
cd -

#repeats last command (ex. sudo !!)
!!

#runs last command subbing string2 in for string1
^string1^string2

#renames files
rename 's/string1/string2/' \*.txt

#delete word/argument to left of cursor
ctrl + w

#suspend process; continue it in the background
ctrl + z; bg

#quit line, new blank entry
ctrl + c

#backgrounding and foregrounding different jobs

#inserts last arguments from you last bash command
<esc>.


wget -p -k i3wm.org/docs/userguide.html
# The -p will get you all the required elements to view the site correctly (css, images, etc). The -k will change all links (to include those for CSS & images) to allow you to view the page offline as it appeared online.


# recursively get all pages up to 5 levels deep, with local links so you can navigate the pages
 wget -r -k www.website.com

# mirror the whole website
wget -m www.website.com

# read file of websites/links to download (for batch)
wget -i /path/to/inputfile

# retry 10 times and will try to connect for 9 seconds for each link in file
wget -t 10 -T 9  -i /path/to/file

# continue download
wget -c www.website.com

# wait 60s between each retrieval (useful/considerate if downloading a lot from one source)
wget -w 60 -i /path/to/file

# waits a randomamt of time so you're not recognized as downloading from a script
wget --random-wait -i /path/to/inputfile

#  	login to a site (don't do on a multiuser computer, running ps will show your username and password)
wget --user=yourusername --password=yourpassword <URL>

# only download filetype .mp3 from a website
wget -A "*.mp3 -r <URL>

# get current week number
python -c 'import datetime; print(str(datetime.date.today().isocalendar()[1]).zfill(2))'

# copy all webpages with random wait time ranging between 0.5 * 2 and 1.5 * 2
# seconds, mirror option () and convert links (change file paths for local
# viewing)
wget -w 2 --random-wait -mk http://www.rotary7430yep.org/


# download mp3 from a youtube video
youtube-dl -x --audio-format mp3 <youtube-url>
